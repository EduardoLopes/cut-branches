
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
/**
 * Gets the root path of a git repository.
 * 
 * # Arguments
 * 
 * * `path` - Path to check for a git repository
 * 
 * # Returns
 * 
 * * `Result<String, AppError>` - JSON string with the root path and ID, or an error
 */
async getRoot(path: string) : Promise<Result<string, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_root", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Command to get information about a git repository.
 * 
 * # Arguments
 * 
 * * `path` - Path to the git repository
 * 
 * # Returns
 * 
 * * `Result<String, AppError>` - A JSON string with repository information or an error
 */
async getRepoInfo(path: string) : Promise<Result<string, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_repo_info", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Command to switch to another branch in a git repository.
 * 
 * # Arguments
 * 
 * * `path` - Path to the git repository
 * * `branch` - The branch name to switch to
 * 
 * # Returns
 * 
 * * `Result<String, AppError>` - The new current branch name or an error
 */
async switchBranch(path: string, branch: string) : Promise<Result<string, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("switch_branch", { path, branch }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Command to delete branches from a git repository.
 * 
 * # Arguments
 * 
 * * `path` - Path to the git repository
 * * `branches` - List of branch names to delete
 * 
 * # Returns
 * 
 * * `Result<String, AppError>` - A JSON string with the deleted branches or an error
 */
async deleteBranches(path: string, branches: string[]) : Promise<Result<string, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_branches", { path, branches }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Command to check if a commit SHA is reachable in a git repository.
 * 
 * # Arguments
 * 
 * * `path` - Path to the git repository
 * * `commit_sha` - The commit SHA to check
 * 
 * # Returns
 * 
 * * `Result<String, AppError>` - A JSON string with the reachability status or an error
 */
async isCommitReachable(path: string, commitSha: string) : Promise<Result<string, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("is_commit_reachable", { path, commitSha }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Command to restore a deleted branch in a git repository.
 * 
 * # Arguments
 * 
 * * `app` - The AppHandle
 * * `path` - Path to the git repository
 * * `branch_info` - Information about the branch to restore
 * 
 * # Returns
 * 
 * * `Result<String, AppError>` - A JSON string with the restoration result or an error
 */
async restoreDeletedBranch(path: string, branchInfo: RestoreBranchInput) : Promise<Result<string, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("restore_deleted_branch", { path, branchInfo }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Command to restore multiple deleted branches in a git repository.
 * 
 * # Arguments
 * 
 * * `app` - The AppHandle
 * * `path` - Path to the git repository
 * * `branch_infos` - Information about the branches to restore
 * 
 * # Returns
 * 
 * * `Result<String, AppError>` - A JSON string with the restoration results or an error
 */
async restoreDeletedBranches(path: string, branchInfos: RestoreBranchInput[]) : Promise<Result<string, AppError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("restore_deleted_branches", { path, branchInfos }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
branchDeleted: BranchDeletedEvent,
branchRestored: BranchRestoredEvent,
branchSwitched: BranchSwitchedEvent,
notification: NotificationEvent,
repositoryLoaded: RepositoryLoadedEvent
}>({
branchDeleted: "branch-deleted",
branchRestored: "branch-restored",
branchSwitched: "branch-switched",
notification: "notification",
repositoryLoaded: "repository-loaded"
})

/** user-defined constants **/



/** user-defined types **/

export type AppError = { message: string; kind: string; description: string | null }
export type Branch = { name: string; fullyMerged: boolean; lastCommit: Commit; current: boolean }
export type BranchDeletedEvent = { deleted_branches: DeletedBranchInfo[]; repository_path: string }
export type BranchRestoredEvent = { restored_branch: Branch; repository_path: string }
export type BranchSwitchedEvent = { from_branch: string; to_branch: string; repository_path: string }
export type Commit = { sha: string; shortSha: string; date: string; message: string; author: string; email: string }
export type ConflictResolution = "Overwrite" | "Rename" | "Skip"
export type DeletedBranchInfo = { branch: Branch; raw_output: string }
export type NotificationEvent = { title: string; message: string; kind: NotificationKind; duration: number | null }
export type NotificationKind = "Success" | "Error" | "Warning" | "Info"
export type RepositoryLoadedEvent = { repository_path: string; repository_name: string; branches_count: number }
export type RestoreBranchInput = { originalName: string; targetName: string; commitSha: string; conflictResolution: ConflictResolution | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
